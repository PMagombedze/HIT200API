"""SQLAlchemy models for users and posts
"""
from flask_sqlalchemy import SQLAlchemy
from flask_bcrypt import Bcrypt
import uuid

bcrypt = Bcrypt()
db = SQLAlchemy()

class User(db.Model):
    """
    User model for storing user-related information.
    Attributes:
        __tablename__ (str): The name of the table in the database.
        id (str): The unique identifier for the user, generated using UUID.
        email (str): The email address of the user, must be unique and not nullable.
        password (str): The hashed password of the user, not nullable.
    Methods:
        __init__(self, email, password):
            Initializes a new User instance with the provided email and password.
            The password is hashed before storing.
        __repr__(self):
            Returns a string representation of the User instance, showing the email.
        check_password(self, password):
            Checks if the provided password matches the stored hashed password.
        to_dict(self):
            Converts the User instance to a dictionary format, including id, username, and email.
    """

    __tablename__ = 'users'
    id = db.Column(db.String(120), primary_key=True, default=str(uuid.uuid4()))
    email = db.Column(db.String(120), unique=True, nullable=False)
    password = db.Column(db.String(120), nullable=False)
    is_admin = db.Column(db.Boolean, default=False)
    subscribed = db.Column(db.Boolean, default=False)
    subscription_end_date = db.Column(db.DateTime, nullable=True)
    first_name = db.Column(db.String(120), nullable=True)
    last_name = db.Column(db.String(120), nullable=True)
    joined_at = db.Column(db.DateTime, nullable=False, default=db.func.now())
    city = db.Column(db.String(120), nullable=False)

    def __init__(self, email, password, first_name, last_name, city):
        self.email = email
        self.password = bcrypt.generate_password_hash(password).decode('utf-8')
        self.first_name = first_name
        self.last_name = last_name
        self.city = city
        self.id = str(uuid.uuid4())

    def __repr__(self):
        return '<User %r>' % self.email

    def check_password(self, password):
        return bcrypt.check_password_hash(self.password, password)

    def to_dict(self):
        return {
            'id': self.id,
            'email': self.email,
            'is_admin': self.is_admin,
            'subscribed': self.subscribed,
            'first_name': self.first_name,
            'last_name': self.last_name,
            'joined_at': self.joined_at,
            'city': self.city
        }

class UserProfilePic(db.Model):
    __tablename__ = 'user_profile_pics'
    id = db.Column(db.String(120), primary_key=True, default=str(uuid.uuid4()))
    user_id = db.Column(db.String(120), db.ForeignKey('users.id'), nullable=False)
    profile_pic = db.Column(db.String(255), nullable=False, default='user.svg')
    user = db.relationship('User', backref=db.backref('profile_pics', lazy=True))

    def __init__(self, user_id, profile_pic):
        self.user_id = user_id
        self.profile_pic = profile_pic
        self.id = str(uuid.uuid4())

    def to_dict(self):
        return {
            'id': self.id,
            'user_id': self.user_id,
            'profile_pic': self.profile_pic
        }

class Reviews(db.Model):
    """
    reviews model for storing reviews-related information.
    Attributes:
        id (str): Unique identifier for the reviews, generated by UUID.
        comment (str): Comment of the reviews, must be unique and not null.
        rating (int): Rating of the reviews, cannot be null.
        created_at (datetime): Timestamp when the reviews was created, defaults to current time.
        user_id (str): Foreign key referencing the user who created the reviews, cannot be null.
        product_id (str): Foreign key referencing the product related to the reviews, cannot be null.
        user (User): Relationship to the User model, with a back reference to reviewss.
        product (Product): Relationship to the Product model, with a back reference to reviewss.
    Methods:
        to_dict(): Returns a dictionary representation of the reviews instance.
        __repr__(): Returns a string representation of the reviews instance.
    """

    __tablename__ = 'reviews'
    id = db.Column(db.String(120), primary_key=True, default=str(uuid.uuid4()))
    comment = db.Column(db.String(80), unique=True, nullable=False)
    rating = db.Column(db.Integer, nullable=False)
    created_at = db.Column(db.DateTime, nullable=False, default=db.func.now())
    user_id = db.Column(db.String(120), db.ForeignKey('users.id'), nullable=False)
    product_id = db.Column(db.String(120), db.ForeignKey('products.id'), nullable=False)
    user = db.relationship('User', backref=db.backref('reviewss', lazy=True))
    product = db.relationship('Product', backref=db.backref('reviewss', lazy=True))

    def __init__(self, rating, comment, user_id, product_id):
        self.rating = rating
        self.comment = comment
        self.user_id = user_id
        self.product_id = product_id
        self.id = str(uuid.uuid4())
        self.created_at = db.func.now()

    def to_dict(self):
        return {
            'id': self.id,
            'rating': self.rating,
            'comment': self.comment,
            'created_at': self.created_at,
            'user_id': self.user_id,
            'product_id': self.product_id
        }

    def __repr__(self):
        return '<reviews %r>' % self.comment


class Subscription(db.Model):
    """
    Represents a subscription to a product by a user.
    Attributes:
        id (str): The unique identifier for the subscription.
        user_id (str): The unique identifier for the user who subscribed.
        product_id (str): The unique identifier for the product subscribed to.
        subscribed_at (datetime): The timestamp when the subscription was created.
        user (User): The user who subscribed, represented as a relationship.
        product (Product): The product subscribed to, represented as a relationship.
    Methods:
        to_dict(): Returns a dictionary representation of the subscription.
        __repr__(): Returns a string representation of the subscription.
    """

    __tablename__ = 'subscriptions'
    id = db.Column(db.String(120), primary_key=True, default=str(uuid.uuid4()))
    user_id = db.Column(db.String(120), db.ForeignKey('users.id'), nullable=False)
    product_id = db.Column(db.String(120), db.ForeignKey('products.id'), nullable=False)
    subscribed_at = db.Column(db.DateTime, nullable=False, default=db.func.now())
    user = db.relationship('User', backref=db.backref('subscriptions', lazy=True))
    product = db.relationship('Product', backref=db.backref('subscriptions', lazy=True))

    def __init__(self, user_id, product_id):
        self.user_id = user_id
        self.product_id = product_id
        self.id = str(uuid.uuid4())
        self.subscribed_at = db.func.now()

    def to_dict(self):
        return {
            'id': self.id,
            'user_id': self.user_id,
            'product_id': self.product_id,
            'subscribed_at': self.subscribed_at
        }

    def __repr__(self):
        return '<Subscription %r>' % self.id

class Product(db.Model):
    """
    Product Model
    This model represents a product in the database.
    Attributes:
        id (str): The unique identifier for the product. Defaults to a UUID string.
        name (str): The name of the product. Cannot be null.
        description (str): A brief description of the product. Cannot be null.
        price (float): The price of the product. Cannot be null.
        url (str): The URL of the product. Cannot be null.
        category (str): The category of the product. Cannot be null.
    Methods:
        to_dict(): Returns a dictionary representation of the product.
        __repr__(): Returns a string representation of the product instance.
    """

    __tablename__ = 'products'
    id = db.Column(db.String(120), primary_key=True, default=str(uuid.uuid4()))
    name = db.Column(db.String(80), nullable=False)
    description = db.Column(db.String(255), nullable=False)
    price = db.Column(db.String(80), nullable=False)
    last_recorded_price = db.Column(db.Float, nullable=True)
    url = db.Column(db.String(255), nullable=False)
    store = db.Column(db.String(80), nullable=False)

    def __init__(self, name, description, price, url, store, last_recorded_price):
        self.name = name
        self.description = description
        self.price = price
        self.url = url
        self.last_recorded_price = last_recorded_price
        self.store = store
        self.id = str(uuid.uuid4())
    
    def to_dict(self):
        return {
            'id': self.id,
            'name': self.name,
            'description': self.description,
            'price': self.price,
            'url': self.url,
            'last_recorded_price': self.last_recorded_price,
            'store': self.store
        }

    def __repr__(self):
        return '<Product %r>' % self.name


# personalized products based on what user visits most
class UserProductVisit(db.Model):
    __tablename__ = 'user_product_visits'
    id = db.Column(db.String(120), primary_key=True, default=str(uuid.uuid4()))
    user_id = db.Column(db.String(120), db.ForeignKey('users.id'), nullable=False)
    product_id = db.Column(db.String(120), db.ForeignKey('products.id'), nullable=False)
    visit_timestamp = db.Column(db.DateTime, default=db.func.now())
    user = db.relationship('User', backref=db.backref('product_visits', lazy=True))
    product = db.relationship('Product', backref=db.backref('user_visits', lazy=True))

    def __init__(self, user_id, product_id):
        self.user_id = user_id
        self.product_id = product_id
        self.id = str(uuid.uuid4())
        self.visit_timestamp = db.func.now()
        self.id = str(uuid.uuid4())

    def to_dict(self):
        return {
            'id': self.id,
            'user_id': self.user_id,
            'product_id': self.product_id,
            'visit_timestamp': self.visit_timestamp
        }
    
# admin notifications
class Notification(db.Model):
    __tablename__ = 'notifications'
    id = db.Column(db.String(120), primary_key=True, default=str(uuid.uuid4()))
    user_id = db.Column(db.String(120), db.ForeignKey('users.id'), nullable=False)
    message = db.Column(db.String(255), nullable=False)
    created_at = db.Column(db.DateTime, default=db.func.now())
    user = db.relationship('User', backref=db.backref('notifications', lazy=True))

    def __init__(self, user_id, message):
        self.user_id = user_id
        self.message = message
        self.id = str(uuid.uuid4())
        self.created_at = db.func.now()
    
    def to_dict(self):
        return {
            'id': self.id,
            'user_id': self.user_id,
            'message': self.message,
            'created_at': self.created_at
        }